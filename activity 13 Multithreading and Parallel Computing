import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
//Ex. 30.4 page 1135

public class Prac13 {
    int sum = 0;
    Prac13() {
        ExecutorService e = Executors.newFixedThreadPool(1000);
        for (int i = 0; i < 1000; i++) {
            e.execute(new Sum());
        }
        e.shutdown();

        while (!e.isTerminated()) {

        }
        System.out.println(sum);
    }

    public static void main(String[] args) {
        new Prac13();
    }

    class Sum implements Runnable {


        @Override
        public void run() {


            m();
        }
        public synchronized void m(){
            sum=sum+1;
        }
    }
}

public class Prac13_2 {
    public static void main(String[] args) {
        final String resource1 = "ratan jaiswal";
        final String resource2 = "vimal jaiswal";
        Thread t1 = new Thread() {
            public void run() {
                synchronized (resource1) {
                    System.out.println("Thread 1: locked resource 1");

                    try { Thread.sleep(100);} catch (Exception e) {}

                    synchronized (resource2) {
                        System.out.println("Thread 1: locked kresource 2");
                    }
                }
            }
        };

        Thread t2 = new Thread() {
            public void run() {
                synchronized (resource2) {
                    System.out.println("Thread 2: locked resource 2");

                    try { Thread.sleep(100);} catch (Exception e) {}

                    synchronized (resource1) {
                        System.out.println("Thread 2: locked resource 1");
                    }
                }
            }
        };


        t1.start();
        t2.start();
    }
}



